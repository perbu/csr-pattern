//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// CreateKeyValueJSONBody defines parameters for CreateKeyValue.
type CreateKeyValueJSONBody struct {
	// Value The new value to be associated with the key
	Value *string `json:"value,omitempty"`
}

// UpdateValueJSONBody defines parameters for UpdateValue.
type UpdateValueJSONBody struct {
	// Value The new value to be associated with the key
	Value *string `json:"value,omitempty"`
}

// CreateKeyValueJSONRequestBody defines body for CreateKeyValue for application/json ContentType.
type CreateKeyValueJSONRequestBody CreateKeyValueJSONBody

// UpdateValueJSONRequestBody defines body for UpdateValue for application/json ContentType.
type UpdateValueJSONRequestBody UpdateValueJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete key-value pair
	// (DELETE /{key})
	DeleteKeyValue(w http.ResponseWriter, r *http.Request, key string)
	// Read value
	// (GET /{key})
	ReadValue(w http.ResponseWriter, r *http.Request, key string)
	// Create key-value pair
	// (POST /{key})
	CreateKeyValue(w http.ResponseWriter, r *http.Request, key string)
	// Update value
	// (PUT /{key})
	UpdateValue(w http.ResponseWriter, r *http.Request, key string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteKeyValue operation middleware
func (siw *ServerInterfaceWrapper) DeleteKeyValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteKeyValue(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadValue operation middleware
func (siw *ServerInterfaceWrapper) ReadValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadValue(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateKeyValue operation middleware
func (siw *ServerInterfaceWrapper) CreateKeyValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateKeyValue(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateValue operation middleware
func (siw *ServerInterfaceWrapper) UpdateValue(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateValue(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("DELETE "+options.BaseURL+"/{key}", wrapper.DeleteKeyValue)
	m.HandleFunc("GET "+options.BaseURL+"/{key}", wrapper.ReadValue)
	m.HandleFunc("POST "+options.BaseURL+"/{key}", wrapper.CreateKeyValue)
	m.HandleFunc("PUT "+options.BaseURL+"/{key}", wrapper.UpdateValue)

	return m
}

type DeleteKeyValueRequestObject struct {
	Key string `json:"key"`
}

type DeleteKeyValueResponseObject interface {
	VisitDeleteKeyValueResponse(w http.ResponseWriter) error
}

type DeleteKeyValue204Response struct {
}

func (response DeleteKeyValue204Response) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteKeyValue404Response struct {
}

func (response DeleteKeyValue404Response) VisitDeleteKeyValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ReadValueRequestObject struct {
	Key string `json:"key"`
}

type ReadValueResponseObject interface {
	VisitReadValueResponse(w http.ResponseWriter) error
}

type ReadValue200JSONResponse string

func (response ReadValue200JSONResponse) VisitReadValueResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadValue404Response struct {
}

func (response ReadValue404Response) VisitReadValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type CreateKeyValueRequestObject struct {
	Key  string `json:"key"`
	Body *CreateKeyValueJSONRequestBody
}

type CreateKeyValueResponseObject interface {
	VisitCreateKeyValueResponse(w http.ResponseWriter) error
}

type CreateKeyValue201Response struct {
}

func (response CreateKeyValue201Response) VisitCreateKeyValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateKeyValue400Response struct {
}

func (response CreateKeyValue400Response) VisitCreateKeyValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateKeyValue409Response struct {
}

func (response CreateKeyValue409Response) VisitCreateKeyValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type UpdateValueRequestObject struct {
	Key  string `json:"key"`
	Body *UpdateValueJSONRequestBody
}

type UpdateValueResponseObject interface {
	VisitUpdateValueResponse(w http.ResponseWriter) error
}

type UpdateValue204Response struct {
}

func (response UpdateValue204Response) VisitUpdateValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateValue400Response struct {
}

func (response UpdateValue400Response) VisitUpdateValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateValue404Response struct {
}

func (response UpdateValue404Response) VisitUpdateValueResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete key-value pair
	// (DELETE /{key})
	DeleteKeyValue(ctx context.Context, request DeleteKeyValueRequestObject) (DeleteKeyValueResponseObject, error)
	// Read value
	// (GET /{key})
	ReadValue(ctx context.Context, request ReadValueRequestObject) (ReadValueResponseObject, error)
	// Create key-value pair
	// (POST /{key})
	CreateKeyValue(ctx context.Context, request CreateKeyValueRequestObject) (CreateKeyValueResponseObject, error)
	// Update value
	// (PUT /{key})
	UpdateValue(ctx context.Context, request UpdateValueRequestObject) (UpdateValueResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteKeyValue operation middleware
func (sh *strictHandler) DeleteKeyValue(w http.ResponseWriter, r *http.Request, key string) {
	var request DeleteKeyValueRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteKeyValue(ctx, request.(DeleteKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteKeyValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteKeyValueResponseObject); ok {
		if err := validResponse.VisitDeleteKeyValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadValue operation middleware
func (sh *strictHandler) ReadValue(w http.ResponseWriter, r *http.Request, key string) {
	var request ReadValueRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadValue(ctx, request.(ReadValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadValueResponseObject); ok {
		if err := validResponse.VisitReadValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateKeyValue operation middleware
func (sh *strictHandler) CreateKeyValue(w http.ResponseWriter, r *http.Request, key string) {
	var request CreateKeyValueRequestObject

	request.Key = key

	var body CreateKeyValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateKeyValue(ctx, request.(CreateKeyValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateKeyValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateKeyValueResponseObject); ok {
		if err := validResponse.VisitCreateKeyValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateValue operation middleware
func (sh *strictHandler) UpdateValue(w http.ResponseWriter, r *http.Request, key string) {
	var request UpdateValueRequestObject

	request.Key = key

	var body UpdateValueJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateValue(ctx, request.(UpdateValueRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateValue")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateValueResponseObject); ok {
		if err := validResponse.VisitUpdateValueResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xUzW/bPgz9VwSe3TT9/XqZb/u4BLkM3cdl2EG1mESNI6ki7c4I9L8PEtMAdbyPrNtO",
	"O9kQyEfyvUfuwbqVh3oPbLlFqGGJw8VH3Xao3rGPqF6+XUAFPUay3kEN/RWkCnxAp4OFGv6fzWdzqCBo",
	"3lAGutxvcUj5z2CLjPJHTbSBBeJNeSfFG1RbHC76Ui5oG5Um8o3VjEY9WN6UkLXt0eXAGZTCUWechTki",
	"LXEoHZcuot4hYySoP43rvpd6ir2S1gq8VF/5CBXYHJYngQqc3mU+tjhABRHvOxvRQM2xwwqo2eBOF96G",
	"kMOIo3VrSOlzDqbgHWGh47/59SkDy6dTSzdGUdc0SLTq2nbILF9/I1c5z2rlO2cgpQqo2+10HI58jEjN",
	"SGvkU6Qb5GixPyghCWcKcIPanMt9PJT9O+zP86fxjtEVCnQIrW3KBJd3lHvbfwcvVaM5ZDUeR/gNkmUG",
	"hYWcHjxNCPU6os4Lo5XDh5G6p5pI9C8sRVMS/5gs9x0Sv/JmOEuREPN0bEVPIaqeGiJTI22zV7fTTpa+",
	"x90dX/ztHTYssj8dLp346uqHWy10Tllkfpq7cL1urVEHmiTuxbSVdBtRm0HhF0tMIz+J+hMnIHQTzvoQ",
	"jObnHAABONdpXcn657SfctrEQZErJCw+x2Bn3ioR+/FapZS+BgAA//9k+FAgPwgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
